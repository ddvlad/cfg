# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=9999
HISTFILESIZE=999999

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
	PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\] \[\033[01;34m\]\w \[\033[00m\]\$ '
else
	PS1='${debian_chroot:+($debian_chroot)}\u@\h \w$(parse_git_branch)\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

alias go="xdg-open"
alias todo="vi ~/.todo/todo.txt"

alias notify='notify-send "Job done!"'

# Ripped off from Cosmin Ratiu, un SO list; added 30 Jun 2009
function gen-cscope
{
    find "${@:-.}" -iregex '.*\.\(c\|h\|cpp\|hpp\|cc\|hh\|cxx\|hxx\|py\)' | cscope -b -i-
}

# Required for vim zenburn colorscheme
export TERM=xterm-256color

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# Idea and colors based on
# http://tldp.org/HOWTO/Bash-Prompt-HOWTO/saving-complex-prompts.html
function myps1 {
	local WHITE="\[\033[1;37m\]"
	local CYAN="\[\033[1;36m\]"
	local YELLOW="\[\033[1;33m\]"
	local NO_COLOUR="\[\033[0m\]"
	local RED="\[\033[1;31m\]"
	local prompt_color=$WHITE
	[ $UID -eq 0 ] && prompt_color=$RED

	case $TERM in
		xterm*|rxvt*)
			TITLEBAR='\[\033]0;\u@\h:\w\007\]'
			;;
		*)
			TITLEBAR=""
			;;
	esac

	PS1="$TITLEBAR\
$prompt_color\u@\h \
$CYAN\w \
$YELLOW("'`ls -1 | wc -l`'" files)\
${YELLOW}"'`j=$(jobs | wc -l); test $j -gt 0 && echo -n " (jobs: $j)"`'"
${CYAN}\$ \
$NO_COLOUR"
}

myps1

export EDITOR=vim

function cpv() {
	if ! test $# -eq 1 -o $# -eq 2; then
		echo "wrong number of arguments: cpv src [dst]"
		return 1
	fi
	test -z "$2" && dst=. || dst="$2"
	pv < "$1" > "$dst/$(basename $1)"
}

alias agrep=ack
alias v='vi -R -'

# Created by `pipx` on 2024-09-18 13:57:42
export PATH="$PATH:/home/ddvlad/.local/bin"
eval "$(register-python-argcomplete pipx)"
